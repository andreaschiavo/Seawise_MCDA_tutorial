[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "SEAwise Tutorial WP6: Multi-Criteria Decision Analysis",
    "section": "",
    "text": "Welcome\nThis is a tutorial to run a MCDA analysis on the output of the models from Seawise H2020 project case studies. The tutorial is divided into 3 sections:\n\nMulti-Criteria Decision Analysis concept, what is MCDA? what are possible applications? what has been done in Seawise?;\nSeawise MCDA example, briefly introducing the approach adopted in the Seawise project;\nR-script, displaying a trial of the mcda.R script developed within the Seawise project;\nVisualization, showcasing the use of 3 buil-in function to plot MCDA results;\nInput File Format, showing the preparation of input files for the mcda.R script;\n\nOptions File , showing the preparation of the options file for the mcda.R script.\n\nFor additional information on the Seawise MCDA results consult SEAwise Report on the impacts of fisheries on stocks and landings under SEAwise EBFM - Garcìa et al. 2025\nVisit the Seawise youtube channel for other courses and tutorials on EBFM methods.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>SeaWise WP6.12 Tutorial - MCDA</span>"
    ]
  },
  {
    "objectID": "01_Theory.html",
    "href": "01_Theory.html",
    "title": "Multi-Criteria Decision Analysis (MCDA)",
    "section": "",
    "text": "Introduction\nIn decision-making processes we are often confronted with multiple options or scenarios, each carrying different values with respect to the criteria or attributes that we consider important. By comparing these criteria to reference thresholds, we can define our level of satisfaction with the different options.\nHowever, decision-making is rarely straightforward: stakeholders usually have diverse interests, which generate conflicts and unresolved trade-offs among alternatives.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Multi-Criteria Decision Analysis (MCDA)</span>"
    ]
  },
  {
    "objectID": "01_Theory.html#mcda-in-fisheries-management",
    "href": "01_Theory.html#mcda-in-fisheries-management",
    "title": "Multi-Criteria Decision Analysis (MCDA)",
    "section": "MCDA in Fisheries Management",
    "text": "MCDA in Fisheries Management\nFisheries management is a clear example. Here, the challenge is to reconcile objectives such as maximizing fishing yields and profits while minimizing ecological and social impacts. The transition towards an ecosystem-based fisheries management approach complicates this even further, because of the growing number of indicators used to describe the system. These indicators give us a holistic view of the ecosystem, but they also increase the number of conflicts and trade-offs that must be addressed.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Multi-Criteria Decision Analysis (MCDA)</span>"
    ]
  },
  {
    "objectID": "01_Theory.html#maut-key-steps",
    "href": "01_Theory.html#maut-key-steps",
    "title": "Multi-Criteria Decision Analysis (MCDA)",
    "section": "MAUT key steps",
    "text": "MAUT key steps\nThe main steps of MAUT are the following:\n\nidentifying decision objectives and relevant indicators (attributes) to measure performance with respect to each of them;\ndeveloping utility functions that express the desirability, or satisfaction, associated with a given indicator value;\nassigning weights to attributes reflecting their importance in the decision;\naggregating weighted utilities into a composite score representing the overall performance of a scenario;\ncomparing scenarios in terms of overall performance.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Multi-Criteria Decision Analysis (MCDA)</span>"
    ]
  },
  {
    "objectID": "01_Theory.html#utility-scores",
    "href": "01_Theory.html#utility-scores",
    "title": "Multi-Criteria Decision Analysis (MCDA)",
    "section": "Utility scores",
    "text": "Utility scores\nThe performance of each objective is translated into a utility score, and these partial utilities are then aggregated into a single measure of overall performance. This facilitates clear comparisons among management scenarios, promotes stakeholder engagement, and supports transparent, evidence-based policies.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Multi-Criteria Decision Analysis (MCDA)</span>"
    ]
  },
  {
    "objectID": "01_Theory Seawise_example.html",
    "href": "01_Theory Seawise_example.html",
    "title": "Seawise MCDA example",
    "section": "",
    "text": "Criteria\nIn Seawise, we identified six macro-criteria, each corresponding to a management criteria: conserving stocks, conserving biodiversity, conserving habitats, mitigating climate change, sustaining communities, and ensuring economic viability.\n\n\n\n\n\nMacro_criterion\nAttribute\nUnit\n\n\n\n\nConserving stocks\nSpawning Stock Biomass (SSB)\nt\n\n\nFishing mortality (F)\nyr–1\n\n\nConserving biodiversity\nMean maximum length across trophic guilds (MML)\ncm\n\n\nApex vertebrate predator biomass (AVPB)\nt\n\n\nConserving habitats\nRelative benthic state (RBS)\n% area with RBS≥0.8\n\n\nMitigating climate change\nCO2 emissions per unit catch (CO2)\ntCO2 / kg\n\n\nSustaining communities\nWage (WAGE)\n€\n\n\nEmployment (EMPL)\nFTE\n\n\nRatio between small and large scale fishery landing value (RSL)\n--\n\n\nEnsuring economic viability\nGross value added (GVA)\n€\n\n\n\n\n\n\n\nUtility funcitons and reference points\nFor every indicator, we defined a utility function that maps its value to a range between zero — representing minimum satisfaction — and one — representing maximum satisfaction. Utility functions incorporated reference points whenever available; otherwise, the current value of the indicator served as a baseline.\n\n   \n\n\n\nAlternatives/Scenarios\nWe defined a number of scenarios based on the combination of time periods, climatic projections and management strategies.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Seawise MCDA example</span>"
    ]
  },
  {
    "objectID": "02_R-script.html",
    "href": "02_R-script.html",
    "title": "R-script",
    "section": "",
    "text": "1. INPUT FILE FORMAT\nThe mcda.R script needs a specific input data format that is derived from Seawise model output summary templates. The file is loaded into the script and must have the following structure:\ncolumn1: “time_period”, column2: “scenario”, column3: “quantile”, column4-columnN:\nIf one or more criteria have sub_criteria:\ncolumn1: “time_period”, column2: “scenario”, column3: “quantile”, column4 “sub_criteria”, column5-n:\ncolumn names from 1 to 3/4 cannot be changed as the mcda.R script uses them to build the alternatives of the analysis.\nThe names of the criteria columns must be the same of the criteria listed in the option file.\ntime_period and scenario labels must be consistent for all the criteria.\nThe path of the input data must be specified into the option file described above for all the criteria. the chunck below is an example of input dataframe for ssb and f (with the different stocks as sub-criteria) and for socioeconomic criteria.\nNote that it’s possible to have all criteria without sub-criteria or those with sub-criteria in a single file\nprint(head(read.csv(\"data/MCDA_stock_dummy.csv\", row.names = 1)))\n\n  time_period   scenario quantile sub_criteria    ssb   f\n0   2025-2030 Fmsy_RCP45      0.5          HKE 1854.8 1.9\n1   2030-2035 Fmsy_RCP45      0.5          HKE 1901.8 1.6\n2   2035-2040 Fmsy_RCP45      0.5          HKE 1890.6 1.7\n3   2040-2045 Fmsy_RCP45      0.5          HKE 1216.5 1.1\n4   2045-2050 Fmsy_RCP45      0.5          HKE 1543.6 1.7\n5   2025-2030 Fmsy_RCP85      0.5          HKE 1428.2 1.9\n\nprint(head(read.csv(\"data/MCDA_dummy.csv\", row.names = 1)))\n\n  time_period   scenario quantile  mml avpb  rbs co2 wage empl  rsl   gva\n0   2025-2030 Fmsy_RCP45      0.5 45.5  512 0.53  10 1507  177 0.60 10494\n1   2030-2035 Fmsy_RCP45      0.5 46.0  563 0.50  15 1486  187 0.51 21188\n2   2035-2040 Fmsy_RCP45      0.5 45.6  579 0.68  15 1588  155 0.51 16697\n3   2040-2045 Fmsy_RCP45      0.5 45.8  561 0.54  14 1665  156 0.55 11998\n4   2045-2050 Fmsy_RCP45      0.5 46.0  563 0.51  13 1799  105 0.70 12789\n5   2025-2030 Fmsy_RCP85      0.5 45.5  549 0.50  10 1693  182 0.59 10825",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>R-script</span>"
    ]
  },
  {
    "objectID": "02_R-script.html#sub-criteria",
    "href": "02_R-script.html#sub-criteria",
    "title": "R-script",
    "section": "Sub-criteria",
    "text": "Sub-criteria\nOnce the mcda object is created and the utilities are calculated it is possible to aggregate the criteria. two methods are implemented:\n\nsum: this method performs the sum of the utilities of the criteria passed. If weighted is set to TRUE, the output would be a weighted sum with normalized weights between 0-1.\ngmean: this method performs the geometric mean of the utilities of the criteria passed. If weighted is set to TRUE, the output would be a weighted geometric mean with normalized weights between 0-1.\n\nIf a criterion has sub-criteria, these can be aggregated by passing the sub_criteria argument as TRUE. If two criteria that share the same sub-criteria/criterion are passed with sub_criteria = TRUE, they will be combined into a new criterion retaining the same sub-criteria as the original ones.\nOne criterion can be passed with sub_criteria = FALSE to generate a new labeled criterion (see 1.7 Habitats aggregation).\nset_weight argument is 1 by default. By changing the value of set_weight the weight of the new criterion is set accordingly (but it can be modified later with the function set_weights) (see 1.5)\n\nmcda &lt;- aggregate_utilities(mcda,\n                            criteria = c('f'), \n                            label = \"combined_f\", \n                            method = \"sum\", \n                            set_weight = 1, \n                            sub_criteria = TRUE, \n                            weighted = TRUE)\n\nmcda &lt;- aggregate_utilities(mcda,\n                            criteria = c('ssb'), \n                            label = \"combined_ssb\", \n                            method = \"sum\", \n                            set_weight = 1, \n                            sub_criteria = TRUE, \n                            weighted = TRUE)",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>R-script</span>"
    ]
  },
  {
    "objectID": "02_R-script.html#macro-criteria",
    "href": "02_R-script.html#macro-criteria",
    "title": "R-script",
    "section": "Macro-criteria",
    "text": "Macro-criteria\nAggregate the criteria into the macro-criteria from the Seawise online tool. Macro-criteria are then passed to the run_maut function. This function runs the Multi-Attribute Utility Theory analysis performing a weighted sum on the passed criteria.\n\n# STOCKS\nmcda &lt;- aggregate_utilities(mcda, criteria = c('combined_f', 'combined_ssb'), label = \"stocks\", method = \"sum\", set_weight = 1, sub_criteria = FALSE, weighted = TRUE)\n\n# BIODIVERSITY\nmcda &lt;- aggregate_utilities(mcda, criteria = c('mml', 'avpb'), label = \"biodiversity\", method = \"sum\", set_weight = 1, sub_criteria = FALSE, weighted = TRUE)\n\n# HABITATS\nmcda &lt;- aggregate_utilities(mcda, criteria = c('rbs'), label = \"habitats\", method = \"sum\", set_weight = 1, sub_criteria = FALSE, weighted = TRUE)\n\n# COMMUNITY\nmcda &lt;- aggregate_utilities(mcda, criteria = c('empl', 'rsl', 'wage'), label = \"community\", method = \"sum\", set_weight = 1, sub_criteria = FALSE, weighted = TRUE)\n\n# REVENUE\nmcda &lt;- aggregate_utilities(mcda, criteria = c('gva'), label = \"revenue\", method = \"sum\", set_weight = 1, sub_criteria = FALSE, weighted = TRUE)\n\n# CLIMATE CHANGE\nmcda &lt;- aggregate_utilities(mcda, criteria = c('co2'), label = \"climate change\", method = \"sum\", set_weight = 1, sub_criteria = FALSE, weighted = TRUE)",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>R-script</span>"
    ]
  },
  {
    "objectID": "03_Visualization.html",
    "href": "03_Visualization.html",
    "title": "Visualization",
    "section": "",
    "text": "3 types of graphs can be generate with this library using the dataframe output from the MCDA analysis:\n\n1 Stacked bar chart (plot_histogram):\nThis function generates a stacked bar chart. On the x axis the scenarios, on the y axis the utility values for the criteria of the MCDA. weights argument is always needed; parents argument is needed in case subcriteria is set to TRUE; scenarios (default, = NULL) can be passed as a list of scenarios to compare fewer alternatives. If NULL or blank, all the scenarios included in the MCDA are plotted; subcriteria (default FALSE) can be set to TRUE to plot the sub-criteria of the criteria passed; color (default, = “Set3”) can be modified with a discrete color palette from RColorBrewer;\nv.0 notes: when plotting macro-criteria and setting subcriteria as TRUE, the legend for the macro-criteria is not visualized\n\nplot_histogram(df,\n               criteria = c(\"stocks\", \"biodiversity\",\"habitats\", \"community\", \"revenue\", \"climate change\"),\n               weights = mcda$weights,\n               parents = mcda$parents,\n               subcriteria = FALSE,\n               facet = TRUE\n               )\n\n\n\n\n\n\n\n\n\n2 Utility matrix visualization (plot_matrix)\nThis function generates matrix plot. On the x axis the criteria, on the y axis the scenarios, while the color gradient represent the utility values. criteria (default, = “all”) is the list of criteria to plot; scenarios (default, = “all”) is the list of scenarios to plot; color (default, = “Set3”) can be modified with a discrete color palette from RColorBrewer; style (default, = “minimal”) set the style of the plot\n\nplot_matrix(df, criteria = c(\"stocks\", \"biodiversity\",\"habitats\", \"community\", \"revenue\", \"climate change\", \"total_utility\"),\n            color = \"Blues\")\n\n\n\n\n\n\n\n\n\n\n3 Parallel plot (plot_parallel_graph)\nThis function generates a parallel plot. On the x axis the criteria, on the y axis the utilities; the plots connecting the criteria axes are the utilities of the different scenarios.\ncriteria is the list of criteria to plot; highlight (default, = “top”) is the criterion for selecting the highlighted scenarios; top_bottom_criterion (default, = “total_utility”) the criterion for sorting of the top scenarios (this function uses the top_scenario function);\nv.0 note: only top 5 scenarios sorted by “total_utility” can be highlighted in this version. the idea is to having the possibility to pass a list of scenarios into highlight to highlight those in the chart\n\nplot_parallel_graph(df, criteria = c('combined_ssb', 'combined_f', 'rbs', 'mml', 'avpb', 'empl', 'wage', 'gva','co2', 'rsl'), #\n                    highlight = \"top\",\n                    top_bottom_criterion = \"total_utility\")",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Visualization</span>"
    ]
  },
  {
    "objectID": "InputFileFormat.html",
    "href": "InputFileFormat.html",
    "title": "Input file",
    "section": "",
    "text": "4. INPUT FILE FORMAT\nThe mcda.R script needs a specific input data format that is derived from Seawise model output summary templates. The file is loaded into the script and must have the following structure:\ncolumn1: “time_period”, column2: “scenario”, column3: “quantile”, column4-columnN: \nIf one or more criteria have sub_criteria:\ncolumn1: “time_period”, column2: “scenario”, column3: “quantile”, column4 “sub_criteria”, column5-n: \ncolumn names from 1 to 3/4 cannot be changed as the mcda.R script uses them to build the alternatives of the analysis.\nThe names of the criteria columns must be the same of the criteria listed in the option file.\ntime_period and scenario labels must be consistent for all the criteria.\nThe path of the input data must be specified into the option file described above for all the criteria. the chunck below is an example of input dataframe for ssb and f (with the different stocks as sub-criteria) and for socioeconomic criteria.\nNote that it’s possible to have all criteria without sub-criteria or those with sub-criteria in a single file\n\nprint(head(read.csv(\"data/MCDA_stock_dummy.csv\", row.names = 1)))\n\n  time_period   scenario quantile sub_criteria    ssb   f\n0   2025-2030 Fmsy_RCP45      0.5          HKE 1854.8 1.9\n1   2030-2035 Fmsy_RCP45      0.5          HKE 1901.8 1.6\n2   2035-2040 Fmsy_RCP45      0.5          HKE 1890.6 1.7\n3   2040-2045 Fmsy_RCP45      0.5          HKE 1216.5 1.1\n4   2045-2050 Fmsy_RCP45      0.5          HKE 1543.6 1.7\n5   2025-2030 Fmsy_RCP85      0.5          HKE 1428.2 1.9\n\nprint(head(read.csv(\"data/MCDA_dummy.csv\", row.names = 1)))\n\n  time_period   scenario quantile  mml avpb  rbs co2 wage empl  rsl   gva\n0   2025-2030 Fmsy_RCP45      0.5 45.5  512 0.53  10 1507  177 0.60 10494\n1   2030-2035 Fmsy_RCP45      0.5 46.0  563 0.50  15 1486  187 0.51 21188\n2   2035-2040 Fmsy_RCP45      0.5 45.6  579 0.68  15 1588  155 0.51 16697\n3   2040-2045 Fmsy_RCP45      0.5 45.8  561 0.54  14 1665  156 0.55 11998\n4   2045-2050 Fmsy_RCP45      0.5 46.0  563 0.51  13 1799  105 0.70 12789\n5   2025-2030 Fmsy_RCP85      0.5 45.5  549 0.50  10 1693  182 0.59 10825",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Input file</span>"
    ]
  },
  {
    "objectID": "genOptionsFile.html",
    "href": "genOptionsFile.html",
    "title": "Option file Generation",
    "section": "",
    "text": "3. OPTION FILE GENERATION\nThe mcda.R script uses an option file in .json format to pick the information on the criteria needed into the analysis (sub-criteria, weights, utility functions, reference points and input data path).\nexport_json.R generates this type of file and can be edited as desired as long as the same criteria names are used into the mcda.R script and found as columns in the input .csv files\nThe reference points follow these criteria: - ssb: c(Blim, Bmsy, U_Blim, U_Bmsy) U_Blim is set to 0.1, U_Bmsy is set to 0.99 In case of stocks for which biomass indicators are not available the reference points are: c(1/2 Bcurrent, Bcurrent, U_1/2Bcurrent, UBcurrent) U_1/2Bcurrent is set to 0.1, U_Bcurrent is set to 0.5\n\nf: c(Fmsy, 2Fmsy, U_Fmsy, U_2Fmsy) U_Fmsy is set to 0.99, U_2Fmsy is set to 0.1\nemployment, wage, gva, mml, avpb, rbs: c(1/2currentLevel, currentLevel, U_1/2currentLevel, U_currentLevel) U_1/2currentLevel is set to 0.1, U_currentLevel is set to 0.5\nco2: c(noEmissionLvl, currentLvl, U_noEmissionLvl, U_currentLvl) U_noEmissionLvl is set to 0.99, U_currentLvl is set to 0.5\nrsl: c(currentLvl, k_coeff) k is set to 4\n\nEach criterion needs to have an initial weight, an utility function_ from the list below and the related reference points (ref_points). For criteria with sub-criteria, utilities are calculated at sub-criterion level, thus function_ and ref_points need to be filled for each sub-criterion (filling in function_ and ref_points for the parent criterion won’t return error)\nUtilities are calculated based on the utilities functions and reference points assigned to each criteria in the options file. 5 function types are supported: - logistic2p logistic growth with 1 reference point: arguments are: (data, x_min, x_max, y(x_min), y(x_max)) - log1p logarithmic growth with 1 reference point: arguments are: (data, x, y, alpha = 1 (optional)) -&gt; alpha controls the upper asymptote: - exp1p exponential growth with 1 reference point: arguments are: (data, x, y); - negexp1p negative exponential growth with 1 reference point: arguments are: (data, x, y); - beta1p beta growth with 1 reference point and k coefficient controlling the full width at half maximum arguments are: (data, x_at_max_y, k = 4 (optional));\nThis options file also includes the path to the input file of each criteria loaded into the mcda.R script\n\nlibrary(jsonlite)\n\noptions &lt;- list(\n  criteria = list(\n    ssb = list(\n      weight = 1,\n      sub_criteria = list(\n        HKE = list(weight = 1, function_ = \"logistic2p\", ref_points = c(800., 2000., 0.1, 0.99)),\n        MUT = list(weight = 1, function_ = \"logistic2p\", ref_points = c(500., 2000., 0.1, 0.99)),\n        SOL = list(weight = 1, function_ = \"logistic2p\", ref_points = c(200., 2000., 0.1, 0.99))\n      ),\n      function_ = NULL,\n      ref_points = NULL\n    ),\n    f = list(\n      weight = 1,\n      sub_criteria = list(\n        HKE = list(weight = 1, function_ = \"logistic2p\", ref_points = c(0.206, 0.412, 0.99, 0.1)),\n        MUT = list(weight = 1, function_ = \"logistic2p\", ref_points = c(0.37, 0.74, 0.99, 0.1)),\n        SOL = list(weight = 1, function_ = \"logistic2p\", ref_points = c(0.937, 1.874, 0.99, 0.1))\n      ),\n      function_ = NULL,\n      ref_points = NULL\n    ),\n    empl = list(weight = 1, sub_criteria = NULL, function_ = \"logistic2p\", ref_points = c(75, 150, 0.1, 0.5)),\n    wage = list(weight = 1, sub_criteria = NULL, function_ = \"logistic2p\", ref_points = c(750, 1500, 0.1, 0.5)),\n    gva = list(weight = 1, sub_criteria = NULL, function_ = \"logistic2p\", ref_points = c(9000, 18000, 0.1, 0.5)),\n    rsl = list(weight = 1, sub_criteria = NULL, function_ = \"beta1p\", ref_points = c(0.5, 4)),\n    co2 = list(weight = 1, sub_criteria = NULL, function_ = \"logistic2p\", ref_points = c(1, 13, 0.99, 0.5)),\n    mml = list(weight = 1, sub_criteria = NULL, function_ = \"logistic2p\", ref_points = c(30, 45.5, 0.1, 0.5)),\n    avpb = list(weight = 1, sub_criteria = NULL, function_ = \"logistic2p\", ref_points = c(275, 550, 0.1, 0.5)),\n    rbs = list(weight = 1, sub_criteria = NULL, function_ = \"logistic2p\", ref_points = c(0.35, 0.7, 0.1, 0.5))\n  ),\n  data = list(\n    ssb = \"data/MCDA_stock_dummy.csv\",\n    f = \"data/MCDA_stock_dummy.csv\",\n    empl = \"data/MCDA_dummy.csv\",\n    wage = \"data/MCDA_dummy.csv\",\n    gva = \"data/MCDA_dummy.csv\",\n    rsl = \"data/MCDA_dummy.csv\",\n    co2 = \"data/MCDA_dummy.csv\",\n    mml = \"data/MCDA_dummy.csv\",\n    avpb = \"data/MCDA_dummy.csv\",\n    rbs = \"data/MCDA_dummy.csv\"\n  )\n)\n\n\n\nwrite_json(options, \"data/MCDA_options_dummy.json\", pretty = TRUE)",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Option file Generation</span>"
    ]
  }
]